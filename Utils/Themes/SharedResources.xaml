<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

<!--
ResourceDictionary: x:Name cannot be used because ResourceDictionary doesn't create an 
                        isolated namescope for resources—it must allow for reuse, so only 
						x:Key is supported.

ControlTemplate: Each control that uses the template gets its own instance, so x:Name is
                 allowed and even required for certain operations.
				 
Learned this behavior from the following offending line:
<ImageBrush x:Name="rscHambugerMenu" x:Key="rscHambugerMenu" ImageSource="/build/Icos/hamburger-menu-icon-png-white-11.jpg" />


DynamicResource vs. StaticResource:

Using {DynamicResource} makes sure runtime theme switch dynamically.

-->



	<!-- Start of applying a style to buttons for pressed and static. the colors are grey
        The style theme starts actually under style "ButtonClickTriggerStyle"
        -->

	<!--
	Below describes the colors used in the UI
	Color description: Light Gray
	Button.Static.Background: #FFDDDDDD

	Color description: Dark Gray (almost charcoal)
	Button.Static.Border: #FF707070

	Color description: Dark Gray (matches Button.Static.Border)
	Button.MouseOver.Background: #FF707070

	Color description: Muted Steel Gray with a slight bluish tone
	Button.MouseOver.Border: #FF656A6D

	Color description: Light Cool Gray (hints of blue)
	Button.Pressed.Background: #FFC5CACC

	Color description: Same as Button.Pressed.Background (Light Cool Gray)
	Button.Pressed.Border: #FFC5CACC

	Color description: Very Light Gray (almost white)
	Button.Disabled.Background: #FFF4F4F4

	Color description: Pale Grayish Blue
	Button.Disabled.Border: #FFADB2B5

	Color description: Medium Gray (neutral tone)
	Button.Disabled.Foreground: #FF838383
	-->	
	<Style x:Key="FocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
	<SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/> 
	<SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FF707070"/>
	<SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF656A6D"/> 
	<!--<SolidColorBrush x:Key="Button.MouseOver.Border" Color="#EF5350"/> -->
	<SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC5CACC"/>
	<SolidColorBrush x:Key="Button.Pressed.Border" Color="#FFC5CACC"/>
	<SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
	<SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
	<SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
	<Style x:Key="ButtonClickTriggerStyle" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
		<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
		<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
						<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsDefaulted" Value="true">
							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
							<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!-- Start of applying a style to buttons for pressed and static. the colors are grey-->




	<!-- Start of resources for settings button 
        Make sure when you add image: Properties → BuildAction='Resource'-->
	<ImageBrush x:Key="rscHambugerMenu" ImageSource="/build/Icos/hamburger-menu-icon-png-white-11.jpg" />
	<Style x:Key="FocusVisual1">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<SolidColorBrush x:Key="Button.Static.Background1" Color="#FFDDDDDD"/>
	<SolidColorBrush x:Key="Button.Static.Border1" Color="#FF707070"/>
	<SolidColorBrush x:Key="Button.MouseOver.Background1" Color="#FF707070"/>
	<SolidColorBrush x:Key="Button.MouseOver.Border1" Color="#FF656A6D"/>
	<SolidColorBrush x:Key="Button.Pressed.Background1" Color="#FFC5CACC"/>
	<SolidColorBrush x:Key="Button.Pressed.Border1" Color="#FFC5CACC"/>
	<SolidColorBrush x:Key="Button.Disabled.Background1" Color="#FFF4F4F4"/>
	<SolidColorBrush x:Key="Button.Disabled.Border1" Color="#FFADB2B5"/>
	<SolidColorBrush x:Key="Button.Disabled.Foreground1" Color="#FF838383"/>
	<Style x:Key="SettingsBtnStyle" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual1}"/>
		<Setter Property="Background" Value="{StaticResource rscHambugerMenu}" />
		<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border1}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Border x:Name="border2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true"/>
						<Image x:Name="image" Source="/build/Icos/hamburger-menu-icon-png-white-11.jpg" Stretch="Uniform" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<!-- Change the background color when mouse is over -->
							<Setter TargetName="border2" Property="Background" Value="{StaticResource Button.MouseOver.Background1}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" TargetName="border2" Value="{StaticResource Button.Pressed.Background1}"/>
							<Setter Property="BorderBrush" TargetName="border2" Value="{StaticResource Button.Pressed.Border1}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" TargetName="border2" Value="{StaticResource Button.Disabled.Background1}"/>
							<Setter Property="BorderBrush" TargetName="border2" Value="{StaticResource Button.Disabled.Border1}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!-- End of resources for settings button -->

	<!-- WIDTH of the scrollbar -->
	<Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
		<Setter Property="MinWidth" Value="10" />
		<Setter Property="Width" Value="10" />
	</Style>

</ResourceDictionary>