<Project>
	<Target Name="ManageVersion" BeforeTargets="BeforeBuild" Condition="'$(Configuration)' == 'Release'">
		<PropertyGroup>
			<!-- File path to store the version -->
			<VersionFile>$(MSBuildProjectDirectory)\build\VersionInfo.txt</VersionFile>
			<!-- Default version if the file does not exist -->
			<DefaultVersion>1.0.0.0</DefaultVersion>
		</PropertyGroup>

		<!-- Ensure the version file exists -->
		<Exec Command="if not exist $(VersionFile) echo $(DefaultVersion) > $(VersionFile)" />

		<!-- Read the version from the file -->
		<ReadLinesFromFile File="$(VersionFile)">
			<Output TaskParameter="Lines" PropertyName="CurrentVersion" />
		</ReadLinesFromFile>

		<!-- Log the current version from the file -->
		<Message Text="Current version read from file: $(CurrentVersion)" Importance="High" />

		<!-- Parse the version components -->
		<PropertyGroup>
			<FileMajorVersion>$([MSBuild]::ValueOrDefault($([System.String]::Copy($(CurrentVersion)).Split('.')[0]), '0'))</FileMajorVersion>
			<FileMinorVersion>$([MSBuild]::ValueOrDefault($([System.String]::Copy($(CurrentVersion)).Split('.')[1]), '0'))</FileMinorVersion>
			<FileRevision>$([MSBuild]::ValueOrDefault($([System.String]::Copy($(CurrentVersion)).Split('.')[2]), '0'))</FileRevision>
			<FileBuildNumber>$([MSBuild]::ValueOrDefault($([System.String]::Copy($(CurrentVersion)).Split('.')[3]), '0'))</FileBuildNumber>
		</PropertyGroup>

		<!-- Reset or Increment the build number -->
		<PropertyGroup>
			<MajorVersion>1</MajorVersion>
			<!-- Update this manually -->
			<MinorVersion>0</MinorVersion>
			<!-- Update this manually -->
			<RevisionNumber>0</RevisionNumber>
			<!-- Update this manually -->

			<!-- Reset build number if major version changes -->
			<BuildNumber Condition="'$(FileMajorVersion)' != '$(MajorVersion)'">0</BuildNumber>
			<BuildNumber Condition="'$(FileMajorVersion)' == '$(MajorVersion)'">$([MSBuild]::Add($(FileBuildNumber), 1))</BuildNumber>
		</PropertyGroup>

		<!-- Log the updated components -->
		<Message Text="Parsed Major Version: $(FileMajorVersion)" Importance="High" />
		<Message Text="Parsed Minor Version: $(FileMinorVersion)" Importance="High" />
		<Message Text="Parsed Revision: $(FileRevision)" Importance="High" />
		<Message Text="Parsed Build Number: $(FileBuildNumber)" Importance="High" />
		<Message Text="Updated Build Number: $(BuildNumber)" Importance="High" />

		<!-- Combine the version -->
		<PropertyGroup>
			<FinalVersion>$(MajorVersion).$(MinorVersion).$(RevisionNumber).$(BuildNumber)</FinalVersion>
		</PropertyGroup>

		<!-- Log the final version -->
		<Message Text="Final Version: $(FinalVersion)" Importance="High" />

		<!-- Write the updated version back to the file -->
		<WriteLinesToFile
            File="$(VersionFile)"
            Lines="$(FinalVersion)"
            Overwrite="true" />
	</Target>

	<Target Name="AddAdditionalReferences" BeforeTargets="ResolveAssemblyReferences">
		<PropertyGroup Condition="'$(DesignTimeBuild)' == 'false' OR '$(BuildingProject)' == 'true'">

			<!-- VERSION INFORMATION for application -->
			<Product>Jotter</Product>
			<Title>Jotter.Core</Title>
			<Company>Nobody Noze</Company>
			<RootNamespace>Jotter.Core</RootNamespace>
			<Copyright>Copyright © $([System.DateTime]::Now.ToString("yyyy"))</Copyright>
			<Description>Note taking app Mike would appreciate</Description>
			<AssemblyTitle>Note taking app Mike would appreciate</AssemblyTitle>
			<AssemblyName>Jotter</AssemblyName>

			<!-- Combine for full semantic version -->
			<VersionSuffix>$(FinalVersion)</VersionSuffix>

			<AssemblyVersion Condition=" '$(VersionSuffix)' != '' ">$(MajorVersion).$(MinorVersion).$(RevisionNumber).0</AssemblyVersion>
			<FileVersion Condition=" '$(VersionSuffix)' != '' ">$(VersionSuffix)</FileVersion>
			<!-- The +<hash> suffix is added automatically to InformationalVersion when using .NET Core SDKs and higher when using this line below:. 
			<InformationalVersion Condition=" '$(VersionSuffix)' != '' ">$(VersionSuffix)</InformationalVersion>
			We want to match semantec version as File Version: 
			-->
			<InformationalVersion Condition=" '$(VersionSuffix)' != '' ">$(MajorVersion).$(MinorVersion).$(RevisionNumber).$(BuildNumber)</InformationalVersion>

			<NeutralLanguage>en</NeutralLanguage>
			<RepositoryUrl>https://github.com/sorrynofocus</RepositoryUrl>
			<RepositoryType>git</RepositoryType>
		</PropertyGroup>
	</Target>
</Project>
